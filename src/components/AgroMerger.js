const { timeout } = require("../utils/helpers")
const filter = require("lodash/filter")
const every = require("lodash/every")
const { RepositoryName } = require("./constants")
const { PromiseQueue } = require("./PromiseQueue")

class AgroMerger {
  constructor({ repositories = [], jiraApis = [], messagers = [] }) {
    if (repositories?.length < 1) {
      throw Error('–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–∏—Ç–ª–∞–±–æ–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–¥–∏–Ω –∏–ª–∏ –±–æ–ª–µ–µ –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤.')
    }
    if (jiraApis?.length < 1) {
      throw Error('–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∂–∏—Ä–æ–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–¥–∏–Ω –∏–ª–∏ –±–æ–ª–µ–µ –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤.')
    }
    if (messagers?.length < 1) {
      throw Error('–£–∫–∞–∂–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–µ—Å—Å–µ–¥–∂–µ—Ä –¥–ª—è –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–π')
    }

    this.repositories = repositories
    this.jiraApis = jiraApis
    this.messagers = messagers
    this.mergingQueue = new PromiseQueue()
  }

  sendMessage = (message, authorNickname) =>
    Promise.all(
      this.messagers.map(({ channels, messager }) => {
        const developer = channels[authorNickname]

        return messager.sendMessage(
          channels.commonGroup,
          `${developer || ''} ${message}`,
        )
      })
    )

  getReadyToReleaseTickets = async (releaseVersion) => {
    const ticketsPromises = await Promise.all(this.jiraApis.map(jira => jira.getTicketsOfReadyToRelease(releaseVersion)))

    return ticketsPromises.flat()
  }

  getMergeRequestsStatusBeforeMerging = async (releaseVersion) => {
    const ticketsToMerge = await this.getReadyToReleaseTickets(releaseVersion)
    const result = await new Promise(async (resolve) => {
      const mergeRequestsInfo = await Promise.all(ticketsToMerge.reduce((result, ticket) => 
        [
          ...result,
          ...this.repositories.map(
            gitlab =>
              gitlab.getMergeRequest(ticket.key)
                .then(({ data: MR }) => ({ hasMr: Boolean(MR), projectId: gitlab.projectId, tiketName: ticket.key }))
          )
        ],
        [],
      ))

      const counter = {}
      mergeRequestsInfo.forEach(({ hasMr, projectId, tiketName }) => {
        if (!counter[projectId]) counter[projectId] = []
        if (hasMr) counter[projectId].push(tiketName)
      })
      resolve(counter)
    })

    return result
  }

  mergeReleaseTickets = async (releaseVersion) => {
    const ticketsToMerge = await this.getReadyToReleaseTickets(releaseVersion)

    if (ticketsToMerge.length === 0) {
      const { currentReleaseVersion } = this.jiraApis[0]
      await this.sendMessage(
        `
        –ü–æ–ø—ã—Ç–∞–ª—Å—è —Å–º–µ—Ä–∂–∏—Ç—å —Ç–∏–∫–µ—Ç—ã, –æ–¥–Ω–∞–∫–æ –Ω–µ –Ω–∞—à—ë–ª –∏—Öü§∑üèº‚Äç‚ôÇÔ∏è
        –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è —Ä–µ–ª–∏–∑–∞: *${currentReleaseVersion}*
        `
      )
      return null
    }

    const info = await this.mergeTickets(ticketsToMerge)

    return info
  }

  mergeTicket = async (ticket) => {
    const { repositories, jiraApis, sendMessage } = this
    const { key } = ticket
    const jira = jiraApis.find(jira => key.includes(jira.projectId))

    this.sendMessage(`\n\n–¢–∏–∫–µ—Ç *${key}*ü¶ß`)
    const mergingResult = await Promise.all(repositories.map(gitlab => this.mergeMergeRequest({ ticketName: key, gitlab, jira })))
    const MRs = filter(mergingResult, { hasMR: true })
    const shouldCloseTicket = MRs.length > 0 && every(MRs, { isMerged: true })
    if (shouldCloseTicket) {
      const { meta } = await jira.closeTicket(key)
      await sendMessage(
        `*–ó–∞–¥–∞—á–∫–∞*: ${key}

         ${meta.isStatusOk ? `–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã–ª` : `–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç:—Å`}.
         *–¢–∏–∫–µ—Ç*: ${jira.baseUrl}/browse/${key}`
      )
    }

    return Promise.resolve(shouldCloseTicket)
  }

  mergeTickets = (ticketsToMerge) => 
    new Promise((resolve) => {
      const tickets = {
        merged: [],
        unable: [],
      }
      const mergingRequests = ticketsToMerge.map((ticket) => 
        this.mergingQueue.add(() => this.mergeTicket(ticket))
          .then((isTicketClosed) => {
            tickets[isTicketClosed ? 'merged' : 'unable'].push(ticket.key)
          })
      )

      Promise.all(mergingRequests).then(() => resolve(tickets))
    })

  mergeMergeRequest = async ({ ticketName, gitlab, jira }) => {
    const baseMergingConfig = { ticketName, gitlab, jira }
    const { mergeRequest, shouldNotTryToMergeMR, isAlreadyMerged } = await this.getMR(baseMergingConfig)
    if (isAlreadyMerged) return { hasMR: true, isMerged: true }
    if (shouldNotTryToMergeMR) return { hasMR: false, isMerged: false }

    await timeout(5000) // –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –≥–∏—Ç–ª–∞–±–∞
    const mergingConfigWithMR = { mergeRequest, ...baseMergingConfig }
    const isRebased = await this.rebaseMR(mergingConfigWithMR)
    if (!isRebased) return { hasMR: true, isMerged: false }

    await timeout(5000)
    const isMerged = await this.mergeMR(mergingConfigWithMR)

    return { hasMR: true, isMerged }
  }

  getMR = async ({ ticketName, gitlab, jira }) =>
    gitlab.getMergeRequest(ticketName).then(async ({ data: MR }) => {
      const { target_branch, web_url } = MR || {}
      const { sendMessage } = this
      const isTargetBranchNotMaster = target_branch !== 'master'
      const projectName = RepositoryName[gitlab.projectId]
      const isAlreadyMerged = Boolean(MR?.merged_by)

      if (isAlreadyMerged) {
        await sendMessage(`*–£–∂–µ –±—ã–ª–∞ —Å–º–µ—Ä–∂–µ–Ω–∞* –≤ –ø—Ä–æ–µ–∫—Ç ${projectName}üêô`)
      } else if (!MR) {
        await sendMessage(`–ù–µ—Ç –≤ –ø—Ä–æ–µ–∫—Ç–µ ${projectName}ü§ì`)
      } else if (isTargetBranchNotMaster) {
        await sendMessage(
          `
            –¢–∞—Ä–≥–µ—Ç –±—Ä—ç–Ω—á –≤ –ø—Ä–æ–µ–∫—Ç–µ ${projectName} —Å–º–æ—Ç—Ä–∏—Ç –Ω–µ –≤ master, –∞ –Ω–∞ *${target_branch}*üò†
            –ü–æ–∫–∞ —á—Ç–æ –º–µ—Ä–∂–∏—Ç—å –Ω–µ –±—É–¥—Éüò§

            *–ú–†*: ${web_url}
            *–¢–∏–∫–µ—Ç*: ${jira.baseUrl}/browse/${ticketName}
          `,
        )
      }

      return {
        mergeRequest: MR,
        shouldNotTryToMergeMR: !MR || isTargetBranchNotMaster || isAlreadyMerged,
        isAlreadyMerged,
      }
    })

  rebaseMR = async ({ ticketName, mergeRequest, gitlab, jira }) =>
    gitlab.rebaseMergeRequest(mergeRequest).then(async ({ meta }) => {
      const { isStatusOk } = meta
      const { web_url, author, has_conflicts, blocking_discussions_resolved } = mergeRequest
      const isNotRebased = !isStatusOk || has_conflicts
      const projectName = RepositoryName[gitlab.projectId]
      await this.sendMessage(
        isNotRebased 
          ? `–•–æ—á—É —Å–º–µ—Ä–∂–∏—Ç—å –∑–∞–¥–∞—á–∫—É *${ticketName}* –≤ –ø—Ä–æ–µ–∫—Ç–µ ${projectName}, –æ–¥–Ω–∞–∫–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—èü§î
             ${has_conflicts ? '–ï—Å—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Ä–µ–±–µ–π–∑–∞üê≠' : ''}
             ${blocking_discussions_resolved ? '' : '–ö–æ–º–º–µ–Ω—Ç—ã –Ω–µ –∑–∞—Ä–µ–∑–æ–ª–≤–ª–µ–Ω—ãüê∑'}
             *–ú–†*: ${web_url}
             *–¢–∏–∫–µ—Ç*: ${jira.baseUrl}/browse/${ticketName} 
             `
          : `–ó–∞–¥–∞—á–∫–∞ *${ticketName}* –ø—Ä–æ–µ–∫—Ç–∞ ${projectName} —Ä–µ–±–µ–π–∑–Ω—É—Ç–∞. –ò–¥—É –º–µ—Ä–∂–∏—Ç—åüòé`,
        author.username,
      )

      return isStatusOk
    })

  mergeMR = async ({ ticketName, mergeRequest, gitlab, jira }) =>
    gitlab.mergeMergeRequest(mergeRequest).then(async ({ meta }) => {
      const { isStatusOk } = meta
      const { web_url, title } = mergeRequest
      await this.sendMessage(
        `*${title}*
         ${isStatusOk ? `–°–º–µ—Ä–∂–∏–ª –ú–†ü§´` : `–ù–µ —Å–º–æ–≥ —Å–º–µ—Ä–∂–∏—Ç—å –ú–†üëΩ`}.
         *–¢–∏–∫–µ—Ç*: ${jira.baseUrl}/browse/${ticketName}
         *–ú–†*: ${web_url}
        `
      )

      return isStatusOk
    })
}

module.exports = {
  AgroMerger,
}